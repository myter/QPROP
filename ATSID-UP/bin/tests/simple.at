//Simple test running single admitter application
//Diamond strucuture to test for glitch freedom
//The application lets two nodes (i.e. x and y) increment the same value, which is even/odd at every two turns and given by the secs node) with one.
//startTest() should print out true at every turn since the counter value propagated by the admitter should be incremented


import /.at.lang.futures exclude seconds,minutes,millisec;
import /.at.support.timer;
import lobby.algorithm.nodes;
import lobby.algorithm.utils;
import lobby.algorithm.admitter;
enableFutures(true);

def isEven(x){
	x % 2 == 0
};

def adm 		:= makeAdmitter("adm");
def secs 		:= makeNode("secs",[],{|v| v});
def x 	 		:= makeNode("x",[secs],{|s| s + 1});
def y 			:= makeNode("y",[secs],{|s| s + 1});
def alwaysEven	:= makeNode("alwaysEven",[x,y],{|x,y| system.println("Even? => " + isEven(x + y))}); 


def printDeps(ref){
	when: (ref<-reachableSet())<-els() becomes:{|elements|
		elements.each:{|e|
			when: e<-getName() becomes:{|n|
				system.println(n);
			}
		}
	};
};

def printChildren(ref){
	when: ref<-children() becomes: {|children|
		children.each:{|c|
			when: c<-getName() becomes:{|n|
				system.println(n);
			}
		}
	}
};


def counter := 0;
def startTest(){
	adm<-changeWith([secs],[counter]);
	counter := counter + 1;
	when: 1.seconds() elapsed:{
		startTest()
	}
}